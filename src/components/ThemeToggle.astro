---
import { Icon } from 'astro-icon/components'
---

<button 
  id="theme-toggle" 
  type="button"
  class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive border bg-background hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 size-9"
  title="Toggle theme"
  aria-label="Toggle theme"
>
  <Icon
    name="lucide:sun"
    class="size-4 scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90"
  />
  <Icon
    name="lucide:moon"
    class="absolute size-4 scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0"
  />
  <span class="sr-only">Toggle theme</span>
</button>

<script is:inline data-astro-rerun>
  // Initialize theme immediately to prevent flash
  (() => {
    const localStorageTheme = localStorage?.getItem('theme') ?? ''
    let theme
    if (['dark', 'light'].includes(localStorageTheme)) {
      theme = localStorageTheme
    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      theme = 'dark'
    } else {
      theme = 'light'
    }

    if (theme === 'light') {
      document.documentElement.classList.remove('dark')
    } else {
      document.documentElement.classList.add('dark')
    }

    window.localStorage.setItem('theme', theme)
  })()
</script>

<script>
  function handleToggleClick(event: Event) {
    event.preventDefault()
    event.stopPropagation()
    
    const element = document.documentElement
    const currentTheme = element.classList.contains('dark') ? 'dark' : 'light'
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark'

    // Disable transitions during the switch
    element.classList.add('disable-transitions')
    
    // Toggle the dark class
    if (newTheme === 'dark') {
      element.classList.add('dark')
    } else {
      element.classList.remove('dark')
    }

    // Force reflow to ensure the class change is applied
    window.getComputedStyle(element).getPropertyValue('opacity')

    // Re-enable transitions after a frame
    requestAnimationFrame(() => {
      element.classList.remove('disable-transitions')
    })

    // Save the new theme preference
    localStorage.setItem('theme', newTheme)
    
    console.log(`Theme switched from ${currentTheme} to ${newTheme}`)
  }

  function initThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle')
    
    if (themeToggle) {
      // Remove any existing event listeners to prevent duplicates
      themeToggle.removeEventListener('click', handleToggleClick)
      themeToggle.addEventListener('click', handleToggleClick)
      console.log('Theme toggle initialized')
    } else {
      console.warn('Theme toggle button not found')
    }
  }

  function applyStoredTheme() {
    const storedTheme = localStorage.getItem('theme')
    const element = document.documentElement

    if (storedTheme === 'dark') {
      element.classList.add('dark')
    } else {
      element.classList.remove('dark')
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      applyStoredTheme()
      initThemeToggle()
    })
  } else {
    applyStoredTheme()
    initThemeToggle()
  }

  // Handle Astro view transitions
  document.addEventListener('astro:after-swap', () => {
    const element = document.documentElement

    element.classList.add('disable-transitions')

    // Force reflow
    window.getComputedStyle(element).getPropertyValue('opacity')

    applyStoredTheme()

    requestAnimationFrame(() => {
      element.classList.remove('disable-transitions')
    })

    // Re-initialize the theme toggle after navigation
    initThemeToggle()
  })

  // Also handle page load events
  window.addEventListener('load', initThemeToggle)
</script>
