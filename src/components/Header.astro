---
import Link from '@/components/Link.astro'

import { NAV_LINKS } from '@/consts'


---

<header
  class="bg-background transition-colors duration-300"
  id="site-header"
  transition:persist
>
  <div
    class="mx-auto flex max-w-4xl items-center justify-center md:justify-end gap-6 px-4 py-6 md:px-4 md:py-3"
  >
    <!-- Navigation and theme toggle -->
    <div class="flex items-center gap-4 md:gap-6">
      <!-- Navigation -->
      <nav class="flex items-center gap-x-4 md:gap-x-6 text-base font-medium">
        {
          NAV_LINKS.map((item) => (
            <Link
              href={item.href}
              class="hover:text-foreground/50 transition-colors py-2 px-1"
            >
              {item.label}
            </Link>
          ))
        }
      </nav>

      <!-- Text-based theme toggle -->
      <button 
        id="theme-toggle" 
        type="button"
        class="text-base font-medium hover:text-foreground/50 transition-colors cursor-pointer py-2 px-1"
        title="Toggle theme"
        aria-label="Toggle theme"
      >
        <span id="theme-text">/dark</span>
      </button>
    </div>
  </div>
</header>


<style>
  @font-face {
    font-family: 'Aero';
    src: url('/fonts/Aero.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
  }


  .aero-text {
    font-family: 'Aero', sans-serif;
    font-size: 1.5rem;
    letter-spacing: 0.05em;
  }
</style>

<script is:inline data-astro-rerun>
  // Initialize theme immediately to prevent flash
  (() => {
    const localStorageTheme = localStorage?.getItem('theme') ?? ''
    let theme
    if (['dark', 'light'].includes(localStorageTheme)) {
      theme = localStorageTheme
    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      theme = 'dark'
    } else {
      theme = 'light'
    }

    if (theme === 'light') {
      document.documentElement.classList.remove('dark')
    } else {
      document.documentElement.classList.add('dark')
    }

    window.localStorage.setItem('theme', theme)
  })()
</script>

<script>
  function handleToggleClick(event: Event) {
    event.preventDefault()
    event.stopPropagation()
    
    const element = document.documentElement
    const currentTheme = element.classList.contains('dark') ? 'dark' : 'light'
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark'

    // Disable transitions during the switch
    element.classList.add('disable-transitions')
    
    // Toggle the dark class
    if (newTheme === 'dark') {
      element.classList.add('dark')
    } else {
      element.classList.remove('dark')
    }

    // Force reflow to ensure the class change is applied
    window.getComputedStyle(element).getPropertyValue('opacity')

    // Re-enable transitions after a frame
    requestAnimationFrame(() => {
      element.classList.remove('disable-transitions')
    })

    // Save the new theme preference
    localStorage.setItem('theme', newTheme)
    
    // Update the text
    const themeText = document.getElementById('theme-text')
    if (themeText) {
      themeText.textContent = newTheme === 'dark' ? '/light' : '/dark'
    }
    
    console.log(`Theme switched from ${currentTheme} to ${newTheme}`)
  }

  function initThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle')
    
    if (themeToggle) {
      // Remove any existing event listeners to prevent duplicates
      themeToggle.removeEventListener('click', handleToggleClick)
      themeToggle.addEventListener('click', handleToggleClick)
      
      // Set initial text
      const themeText = document.getElementById('theme-text')
      const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light'
      if (themeText) {
        themeText.textContent = currentTheme === 'dark' ? '/light' : '/dark'
      }
      
      console.log('Text theme toggle initialized')
    } else {
      console.warn('Theme toggle button not found')
    }
  }

  function applyStoredTheme() {
    const storedTheme = localStorage.getItem('theme')
    const element = document.documentElement

    if (storedTheme === 'dark') {
      element.classList.add('dark')
    } else {
      element.classList.remove('dark')
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      applyStoredTheme()
      initThemeToggle()
    })
  } else {
    applyStoredTheme()
    initThemeToggle()
  }

  // Handle Astro view transitions
  document.addEventListener('astro:after-swap', () => {
    const element = document.documentElement

    element.classList.add('disable-transitions')

    // Force reflow
    window.getComputedStyle(element).getPropertyValue('opacity')

    applyStoredTheme()

    requestAnimationFrame(() => {
      element.classList.remove('disable-transitions')
    })

    // Re-initialize the theme toggle after navigation
    initThemeToggle()
  })

  // Also handle page load events
  window.addEventListener('load', initThemeToggle)
</script>
